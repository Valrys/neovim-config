priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.

global !p
fn_base = fn.split(os.extsep)[0];
lower_first = lambda s: s[:1].lower() + s[1:] if s else ''
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet elem "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet fun "function (fun)" w
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

snippet af "Anonymous Function" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function`!p snip.rv = space_before_function_paren(snip)`() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10})`!p snip.rv = semi(snip)`
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL}${1:case}':
	${VISUAL}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0`!p snip.rv = semi(snip)`
endsnippet

snippet us
'use strict'`!p snip.rv = semi(snip)`
endsnippet

snippet cl
console.log($0)
endsnippet

snippet get
$.ajax({
	url: "$0"
	type: "GET"
	success: function(result) {
	}
});
endsnippet

snippet rc "React Component"
import React, { Component } from 'react';

export default class `!p snip.rv = fn_base` extends Component {
	render() {
		return (
			${1:<div>`!p snip.rv = fn_base`</div>}
		);
	}
}
endsnippet

snippet rfdn "React.findDOMNode"
const node${1/^\w+/\u$0/} = React.findDOMNode($1);
endsnippet

# --------- rcf react class function
snippet rcf "React Component as pure function"
import React from 'react';

export default function `!p snip.rv = fn_base`(props) {
	return (
		<div>`!p snip.rv = fn_base`</div>
	);
}
endsnippet

# --------- rpt
snippet rptr "PropTypes..isRequired"
$2: PropTypes.$1.isRequired
endsnippet

snippet rptar "PropTypes.array.isRequired"
$1: PropTypes.array.isRequired
endsnippet

snippet rptbr "PropTypes.bool.isRequired"
$1: PropTypes.bool.isRequired
endsnippet

snippet rptnr "PropTypes.number.isRequired"
$1: PropTypes.number.isRequired
endsnippet

snippet rptfr "PropTypes.func.isRequired"
$1: PropTypes.func.isRequired
endsnippet

snippet rptor "PropTypes.object.isRequired"
$1: PropTypes.object.isRequired
endsnippet

snippet rptsr "PropTypes.string.isRequired"
$1: PropTypes.string.isRequired
endsnippet

snippet rpter "PropTypes.element.isRequired"
$1: PropTypes.element.isRequired
endsnippet

# -------------- rt(react test)
snippet rtc "React test for Component"
import React, {PropTypes, Component} from 'react';
import TestUtils from 'react-addons-test-utils';
import `!p snip.rv =  "{0} from './{0}'".format(fn_base)`;

describe("`!p snip.rv = fn_base`", () => {

		$0

		});
endsnippet

# find
snippet rtr "React TestUtils.renderIntoDocument"
const ${2/^\w/\l$0/} = TestUtils.renderIntoDocument(<${2:`!p snip.rv = fn_base`} ${1: }/>);
endsnippet

snippet rtfrdct "React TestUtils.findRenderedDOMComponentWithTag"
const $1 = TestUtils.findRenderedDOMComponentWithTag(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:tag}');
endsnippet

snippet rtfrdcc "React TestUtils.findRenderedDOMComponentWithClass"
const $1 = TestUtils.findRenderedDOMComponentWithClass(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:class}');
endsnippet

snippet rtfrct "React TestUtils.findRenderedComponentWithType"
const ${1/^\w+/\l$0/} = TestUtils.findRenderedComponentWithType(${2:`!p snip.rv = lower_first(fn_base)`}, ${1:Component});
endsnippet

# scry
snippet rtsrdct "React TestUtils.scryRenderedDOMComponentsWithTag"
const children${1/^\w+/\u$0/} = TestUtils.scryRenderedDOMComponentsWithTag(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:tag}');
endsnippet

snippet rtsrdcc "React TestUtils.scryRenderedDOMComponentsWithClass"
const children${1/^\w+/\u$0/} = TestUtils.scryRenderedDOMComponentsWithClass(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:class}');
endsnippet

snippet rtsrct "React TestUtils.scryRenderedComponentsWithType"
const children$1 = TestUtils.scryRenderedComponentsWithType(${2:`!p snip.rv = lower_first(fn_base)`}, ${1:Component});
endsnippet

# vim:ft=snippets:
